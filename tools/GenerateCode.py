from sympy import *
from sympy.physics.mechanics import *
from sympy.printing import print_ccode
from sympy.utilities.codegen import codegen

from sympy.simplify.cse_main import *

import numpy
from sympy.utilities.iterables import * 

a = symbols('a[0] a[1] a[2]')
b = symbols('b[0] b[1] b[2]')
c = symbols('c[0] c[1] c[2]')

u = ReferenceFrame('u')

u1=(u.x*a[0] + u.y*a[1] + u.z*a[2])
u2=(u.x*b[0] + u.y*b[1] + u.z*b[2])
u3=(u.x*c[0] + u.y*c[1] + u.z*c[2])

#s1=(u1-u2).normalize()
#s2=(u2-u3).normalize()
#v=cross(s1, s2)
#f=(dot(v,v))

s1=(u1-u2)
s2=(u2-u3)

s1n=s1/s1.magnitude()
s2n=s2/s2.magnitude()

alpha = acos(dot(s1n,s2n))
beta = (((u1+u3)*0.5) - u2).magnitude() ** 2
l1 = (s1.magnitude()-1.0)**2 
l2 = (s2.magnitude()-1.0)**2 
f = alpha

df_dbx=diff(f, b[0])

# vectors could be something like ["x", "y", "z"]
def sympyToC( symname, symfunc, vectors=None):
	c_code = "// autogenerated function\n"

	# simplify the function
	tmpsyms = numbered_symbols("tmp")
	symbols, simple = cse(symfunc, symbols=tmpsyms)

	# create a list of used symbols
	symbolslist = map(lambda x:str(x), list(symfunc.atoms(Symbol)) )
	symbolslist.sort()

	varstring = ""
	if vectors == None:
		varstring=",".join( " double "+x for x in symbolslist )
	else :
		varstring=",".join( " const Vector& "+s for s in vectors )



	c_code += "double "+str(symname)+"("+varstring+" )\n"
	c_code +=  "{\n"
	for s in symbols:
		#print s
		c_code +=  "  double " +ccode(s[0]) + " = " + ccode(s[1]) + ";\n"
	c_code +=  "  double r = " + ccode(simple[0])+";\n"
	c_code +=  "  return r;\n"
	c_code += "}\n"
	return c_code

code = sympyToC( "df_dx", df_dbx, ["a", "b", "c"] )
print code

f = open('gen_src/generatedCode.h', 'w')
f.write("#include \"mathheader.h\">\n\n")
f.write(code)

f.close()



