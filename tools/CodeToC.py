from sympy import *
from sympy.physics.mechanics import *
from sympy.printing import print_ccode
from sympy.utilities.codegen import codegen

from sympy.simplify.cse_main import *

import numpy
from sympy.utilities.iterables import * 

# vectors could be something like ["x", "y", "z"]
def sympyToC( symname, symfunc, vectors=None):
	c_code = "// autogenerated function\n"

	# simplify the function
	tmpsyms = numbered_symbols("tmp")
	symbols, simple = cse(symfunc, symbols=tmpsyms)

	# create a list of used symbols
	symbolslist = map(lambda x:str(x), list(symfunc.atoms(Symbol)) )
	symbolslist.sort()

	varstring = ""
	if vectors == None:
		varstring=",".join( " double "+x for x in symbolslist )
	else :
		varstring=",".join( " const Vector& "+s for s in vectors )



	c_code += "double "+str(symname)+"("+varstring+" )\n"
	c_code +=  "{\n"
	for s in symbols:
		#print s
		c_code +=  "  double " +ccode(s[0]) + " = " + ccode(s[1]) + ";\n"
	c_code +=  "  double r = " + ccode(simple[0])+";\n"
	c_code +=  "  return r;\n"
	c_code += "}\n\n"
	return c_code

def sympyToCMulti( functions, vectors, prefix = "" ):
	code = ""
	for name, symbol in functions:
		code +=sympyToC( prefix+name, symbol, vectors )
	return code



